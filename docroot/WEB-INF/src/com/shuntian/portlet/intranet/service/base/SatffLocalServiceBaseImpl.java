/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.shuntian.portlet.intranet.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.shuntian.portlet.intranet.model.Satff;
import com.shuntian.portlet.intranet.service.SatffLocalService;
import com.shuntian.portlet.intranet.service.persistence.SatffFinder;
import com.shuntian.portlet.intranet.service.persistence.SatffPersistence;
import com.shuntian.portlet.intranet.service.persistence.basic_informationPersistence;
import com.shuntian.portlet.intranet.service.persistence.educationPersistence;
import com.shuntian.portlet.intranet.service.persistence.ext_informationPersistence;
import com.shuntian.portlet.intranet.service.persistence.familyPersistence;
import com.shuntian.portlet.intranet.service.persistence.workPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the satff local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.shuntian.portlet.intranet.service.impl.SatffLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.shuntian.portlet.intranet.service.impl.SatffLocalServiceImpl
 * @see com.shuntian.portlet.intranet.service.SatffLocalServiceUtil
 * @generated
 */
public abstract class SatffLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements SatffLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.shuntian.portlet.intranet.service.SatffLocalServiceUtil} to access the satff local service.
	 */

	/**
	 * Adds the satff to the database. Also notifies the appropriate model listeners.
	 *
	 * @param satff the satff
	 * @return the satff that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Satff addSatff(Satff satff) throws SystemException {
		satff.setNew(true);

		return satffPersistence.update(satff);
	}

	/**
	 * Creates a new satff with the primary key. Does not add the satff to the database.
	 *
	 * @param id the primary key for the new satff
	 * @return the new satff
	 */
	@Override
	public Satff createSatff(long id) {
		return satffPersistence.create(id);
	}

	/**
	 * Deletes the satff with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the satff
	 * @return the satff that was removed
	 * @throws PortalException if a satff with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Satff deleteSatff(long id) throws PortalException, SystemException {
		return satffPersistence.remove(id);
	}

	/**
	 * Deletes the satff from the database. Also notifies the appropriate model listeners.
	 *
	 * @param satff the satff
	 * @return the satff that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Satff deleteSatff(Satff satff) throws SystemException {
		return satffPersistence.remove(satff);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Satff.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return satffPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.shuntian.portlet.intranet.model.impl.SatffModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return satffPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.shuntian.portlet.intranet.model.impl.SatffModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return satffPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return satffPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return satffPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Satff fetchSatff(long id) throws SystemException {
		return satffPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the satff with the matching UUID and company.
	 *
	 * @param uuid the satff's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching satff, or <code>null</code> if a matching satff could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Satff fetchSatffByUuidAndCompanyId(String uuid, long companyId)
		throws SystemException {
		return satffPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the satff with the primary key.
	 *
	 * @param id the primary key of the satff
	 * @return the satff
	 * @throws PortalException if a satff with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Satff getSatff(long id) throws PortalException, SystemException {
		return satffPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return satffPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the satff with the matching UUID and company.
	 *
	 * @param uuid the satff's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching satff
	 * @throws PortalException if a matching satff could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Satff getSatffByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return satffPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns a range of all the satffs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.shuntian.portlet.intranet.model.impl.SatffModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of satffs
	 * @param end the upper bound of the range of satffs (not inclusive)
	 * @return the range of satffs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Satff> getSatffs(int start, int end) throws SystemException {
		return satffPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of satffs.
	 *
	 * @return the number of satffs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSatffsCount() throws SystemException {
		return satffPersistence.countAll();
	}

	/**
	 * Updates the satff in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param satff the satff
	 * @return the satff that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Satff updateSatff(Satff satff) throws SystemException {
		return satffPersistence.update(satff);
	}

	/**
	 * Returns the basic_information local service.
	 *
	 * @return the basic_information local service
	 */
	public com.shuntian.portlet.intranet.service.basic_informationLocalService getbasic_informationLocalService() {
		return basic_informationLocalService;
	}

	/**
	 * Sets the basic_information local service.
	 *
	 * @param basic_informationLocalService the basic_information local service
	 */
	public void setbasic_informationLocalService(
		com.shuntian.portlet.intranet.service.basic_informationLocalService basic_informationLocalService) {
		this.basic_informationLocalService = basic_informationLocalService;
	}

	/**
	 * Returns the basic_information persistence.
	 *
	 * @return the basic_information persistence
	 */
	public basic_informationPersistence getbasic_informationPersistence() {
		return basic_informationPersistence;
	}

	/**
	 * Sets the basic_information persistence.
	 *
	 * @param basic_informationPersistence the basic_information persistence
	 */
	public void setbasic_informationPersistence(
		basic_informationPersistence basic_informationPersistence) {
		this.basic_informationPersistence = basic_informationPersistence;
	}

	/**
	 * Returns the education local service.
	 *
	 * @return the education local service
	 */
	public com.shuntian.portlet.intranet.service.educationLocalService geteducationLocalService() {
		return educationLocalService;
	}

	/**
	 * Sets the education local service.
	 *
	 * @param educationLocalService the education local service
	 */
	public void seteducationLocalService(
		com.shuntian.portlet.intranet.service.educationLocalService educationLocalService) {
		this.educationLocalService = educationLocalService;
	}

	/**
	 * Returns the education persistence.
	 *
	 * @return the education persistence
	 */
	public educationPersistence geteducationPersistence() {
		return educationPersistence;
	}

	/**
	 * Sets the education persistence.
	 *
	 * @param educationPersistence the education persistence
	 */
	public void seteducationPersistence(
		educationPersistence educationPersistence) {
		this.educationPersistence = educationPersistence;
	}

	/**
	 * Returns the ext_information local service.
	 *
	 * @return the ext_information local service
	 */
	public com.shuntian.portlet.intranet.service.ext_informationLocalService getext_informationLocalService() {
		return ext_informationLocalService;
	}

	/**
	 * Sets the ext_information local service.
	 *
	 * @param ext_informationLocalService the ext_information local service
	 */
	public void setext_informationLocalService(
		com.shuntian.portlet.intranet.service.ext_informationLocalService ext_informationLocalService) {
		this.ext_informationLocalService = ext_informationLocalService;
	}

	/**
	 * Returns the ext_information persistence.
	 *
	 * @return the ext_information persistence
	 */
	public ext_informationPersistence getext_informationPersistence() {
		return ext_informationPersistence;
	}

	/**
	 * Sets the ext_information persistence.
	 *
	 * @param ext_informationPersistence the ext_information persistence
	 */
	public void setext_informationPersistence(
		ext_informationPersistence ext_informationPersistence) {
		this.ext_informationPersistence = ext_informationPersistence;
	}

	/**
	 * Returns the family local service.
	 *
	 * @return the family local service
	 */
	public com.shuntian.portlet.intranet.service.familyLocalService getfamilyLocalService() {
		return familyLocalService;
	}

	/**
	 * Sets the family local service.
	 *
	 * @param familyLocalService the family local service
	 */
	public void setfamilyLocalService(
		com.shuntian.portlet.intranet.service.familyLocalService familyLocalService) {
		this.familyLocalService = familyLocalService;
	}

	/**
	 * Returns the family persistence.
	 *
	 * @return the family persistence
	 */
	public familyPersistence getfamilyPersistence() {
		return familyPersistence;
	}

	/**
	 * Sets the family persistence.
	 *
	 * @param familyPersistence the family persistence
	 */
	public void setfamilyPersistence(familyPersistence familyPersistence) {
		this.familyPersistence = familyPersistence;
	}

	/**
	 * Returns the satff local service.
	 *
	 * @return the satff local service
	 */
	public com.shuntian.portlet.intranet.service.SatffLocalService getSatffLocalService() {
		return satffLocalService;
	}

	/**
	 * Sets the satff local service.
	 *
	 * @param satffLocalService the satff local service
	 */
	public void setSatffLocalService(
		com.shuntian.portlet.intranet.service.SatffLocalService satffLocalService) {
		this.satffLocalService = satffLocalService;
	}

	/**
	 * Returns the satff remote service.
	 *
	 * @return the satff remote service
	 */
	public com.shuntian.portlet.intranet.service.SatffService getSatffService() {
		return satffService;
	}

	/**
	 * Sets the satff remote service.
	 *
	 * @param satffService the satff remote service
	 */
	public void setSatffService(
		com.shuntian.portlet.intranet.service.SatffService satffService) {
		this.satffService = satffService;
	}

	/**
	 * Returns the satff persistence.
	 *
	 * @return the satff persistence
	 */
	public SatffPersistence getSatffPersistence() {
		return satffPersistence;
	}

	/**
	 * Sets the satff persistence.
	 *
	 * @param satffPersistence the satff persistence
	 */
	public void setSatffPersistence(SatffPersistence satffPersistence) {
		this.satffPersistence = satffPersistence;
	}

	/**
	 * Returns the satff finder.
	 *
	 * @return the satff finder
	 */
	public SatffFinder getSatffFinder() {
		return satffFinder;
	}

	/**
	 * Sets the satff finder.
	 *
	 * @param satffFinder the satff finder
	 */
	public void setSatffFinder(SatffFinder satffFinder) {
		this.satffFinder = satffFinder;
	}

	/**
	 * Returns the work local service.
	 *
	 * @return the work local service
	 */
	public com.shuntian.portlet.intranet.service.workLocalService getworkLocalService() {
		return workLocalService;
	}

	/**
	 * Sets the work local service.
	 *
	 * @param workLocalService the work local service
	 */
	public void setworkLocalService(
		com.shuntian.portlet.intranet.service.workLocalService workLocalService) {
		this.workLocalService = workLocalService;
	}

	/**
	 * Returns the work persistence.
	 *
	 * @return the work persistence
	 */
	public workPersistence getworkPersistence() {
		return workPersistence;
	}

	/**
	 * Sets the work persistence.
	 *
	 * @param workPersistence the work persistence
	 */
	public void setworkPersistence(workPersistence workPersistence) {
		this.workPersistence = workPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.shuntian.portlet.intranet.model.Satff",
			satffLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.shuntian.portlet.intranet.model.Satff");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Satff.class;
	}

	protected String getModelClassName() {
		return Satff.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = satffPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.shuntian.portlet.intranet.service.basic_informationLocalService.class)
	protected com.shuntian.portlet.intranet.service.basic_informationLocalService basic_informationLocalService;
	@BeanReference(type = basic_informationPersistence.class)
	protected basic_informationPersistence basic_informationPersistence;
	@BeanReference(type = com.shuntian.portlet.intranet.service.educationLocalService.class)
	protected com.shuntian.portlet.intranet.service.educationLocalService educationLocalService;
	@BeanReference(type = educationPersistence.class)
	protected educationPersistence educationPersistence;
	@BeanReference(type = com.shuntian.portlet.intranet.service.ext_informationLocalService.class)
	protected com.shuntian.portlet.intranet.service.ext_informationLocalService ext_informationLocalService;
	@BeanReference(type = ext_informationPersistence.class)
	protected ext_informationPersistence ext_informationPersistence;
	@BeanReference(type = com.shuntian.portlet.intranet.service.familyLocalService.class)
	protected com.shuntian.portlet.intranet.service.familyLocalService familyLocalService;
	@BeanReference(type = familyPersistence.class)
	protected familyPersistence familyPersistence;
	@BeanReference(type = com.shuntian.portlet.intranet.service.SatffLocalService.class)
	protected com.shuntian.portlet.intranet.service.SatffLocalService satffLocalService;
	@BeanReference(type = com.shuntian.portlet.intranet.service.SatffService.class)
	protected com.shuntian.portlet.intranet.service.SatffService satffService;
	@BeanReference(type = SatffPersistence.class)
	protected SatffPersistence satffPersistence;
	@BeanReference(type = SatffFinder.class)
	protected SatffFinder satffFinder;
	@BeanReference(type = com.shuntian.portlet.intranet.service.workLocalService.class)
	protected com.shuntian.portlet.intranet.service.workLocalService workLocalService;
	@BeanReference(type = workPersistence.class)
	protected workPersistence workPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SatffLocalServiceClpInvoker _clpInvoker = new SatffLocalServiceClpInvoker();
}